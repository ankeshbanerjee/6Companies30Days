All elements in two binary search tree
(https://leetcode.com/problems/all-elements-in-two-binary-search-trees/)

CODE:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void inorder (TreeNode * root, vector<int> &in){
        if (root == NULL)
            return;

        inorder (root->left, in);
        in.push_back(root->val);
        inorder(root->right, in);
    }
    void merge (vector <int> &arr1, vector<int> &arr2, vector<int> &ans){
        int i=0, j=0, k=0;
        while (i<arr1.size() && j<arr2.size()){
            if (arr1[i] < arr2[j]){
                ans[k++] = arr1[i++];
            }
            else{
                ans[k++] = arr2[j++];
            }
        }
        while (i<arr1.size()){
            ans[k++] = arr1[i++];
        }
        while (j<arr2.size()){
            ans[k++] = arr2[j++];
        }
    }
public:
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        vector<int> in1, in2;
        inorder (root1, in1);
        inorder (root2, in2);
        vector <int> ans (in1.size() + in2.size());
        merge (in1, in2, ans);
        return ans;
    }
};