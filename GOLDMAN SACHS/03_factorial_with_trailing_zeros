Factorial with Trailing Zeros
(https://leetcode.com/problems/factorial-trailing-zeroes/)

CODE:

class Solution {
public:
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        if (p1 == p2 || p2 == p3 || p3 == p4 || p1 == p3 || p1 == p4 || p2 == p4)
            return false;
            
        set <long long> lengthCnt;
        long long a1 = (p1[0] - p2[0])*(p1[0] - p2[0]) +  (p1[1] - p2[1])*(p1[1] - p2[1]);
        lengthCnt.insert(a1);
    
        long long a2 = (p1[0] - p3[0])*(p1[0] - p3[0]) +  (p1[1] - p3[1])*(p1[1] - p3[1]);
        lengthCnt.insert(a2);
    
        long long a3 = (p1[0] - p4[0])*(p1[0] - p4[0]) +  (p1[1] - p4[1])*(p1[1] - p4[1]);
        lengthCnt.insert(a3);  

        long long a4 = (p2[0] - p3[0])*(p2[0] - p3[0]) +  (p2[1] - p3[1])*(p2[1] - p3[1]);
        lengthCnt.insert(a4);
    
        long long a5 = (p2[0] - p4[0])*(p2[0] - p4[0]) +  (p2[1] - p4[1])*(p2[1] - p4[1]);
        lengthCnt.insert(a5);

        long long a6 = (p3[0] - p4[0])*(p3[0] - p4[0]) +  (p3[1] - p4[1])*(p3[1] - p4[1]);
        lengthCnt.insert(a6);
    
        if (lengthCnt.size() == 2)
            return true;
        else
            return false;
    }
};